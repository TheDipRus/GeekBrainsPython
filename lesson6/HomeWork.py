#TODO-------------------------------- Практическое задание 1 -------------------------------------------
# Создать класс TrafficLight (светофор) и определить у него один атрибут color (цвет) и метод
# running (запуск). Атрибут реализовать как приватный. В рамках метода реализовать
# переключение светофора в режимы: красный, желтый, зеленый. Продолжительность первого
# состояния (красный) составляет 7 секунд, второго (желтый) — 2 секунды, третьего (зеленый)
# — на ваше усмотрение. Переключение между режимами должно осуществляться только в
# указанном порядке (красный, желтый, зеленый). Проверить работу примера, создав экземпляр
# и вызвав описанный метод. Задачу можно усложнить, реализовав проверку порядка режимов, и при его нарушении
# выводить соответствующее сообщение и завершать скрипт

import time


class TrafficLight:
    """Светофор"""
    __color = {
        "Красный": f"\033[41m {'КРАСНЫЙ'}",
        "Желтый": f"\033[43m {'ЖЕЛТЫЙ'}",
        "Зеленый": f"\033[42m {'ЗЕЛЕНЫЙ'}"
    }

    def running(self):
        while True:
            print(self.__color.get('Красный'))
            time.sleep(7)
            print(self.__color.get('Желтый'))
            time.sleep(2)
            print(self.__color.get('Зеленый'))
            time.sleep(7)


# Раскомментировать для запуска !
# if __name__ == '__main__':
#     t1 = TrafficLight()
#     t1.running()


#TODO-------------------------------- Практическое задание 2 -------------------------------------------
# Реализовать класс Road (дорога), в котором определить атрибуты: length (длина), width
# (ширина). Значения данных атрибутов должны передаваться при создании экземпляра
# класса. Атрибуты сделать защищенными. Определить метод расчета массы асфальта,
# необходимого для покрытия всего дорожного полотна. Использовать формулу:
# длина*ширина*масса асфальта для покрытия одного кв метра дороги асфальтом, толщиной в
# 1 см*число см толщины полотна. Проверить работу метода.
# Например: 20м*5000м*25кг*5см = 12500 т

class Road:
    """Расчет дорожного покрытия"""

    def __init__(self, length, width):
        self._length = length
        self._width = width

    def calculation(self):
        return self._length * self._width * 25 * 5


# Раскомментировать для запуска !
# r = Road(20, 5000)
# r.calculation()


#TODO-------------------------------- Практическое задание 3 -------------------------------------------
# Реализовать базовый класс Worker (работник), в котором определить атрибуты: name,
# surname, position (должность), income (доход). Последний атрибут должен быть
# защищенным и ссылаться на словарь, содержащий элементы: оклад и премия, например,
# {"wage": wage, "bonus": bonus}. Создать класс Position (должность) на базе класса Worker.
# В классе Position реализовать методы получения полного имени сотрудника (get_full_name) и
# дохода с учетом премии (get_total_income). Проверить работу примера на реальных данных
# (создать экземпляры класса Position, передать данные, проверить значения атрибутов,
# вызвать методы экземпляров).

class Worker:
    """Инвормация о рабочих"""
    def __init__(self, name, surname, position, wage, bonus):
        self.name = name
        self.surname = surname
        self.position = position
        self._income = {
            "wage": wage,
            "bonus": bonus
        }


class Position(Worker):
    """Вывод данных"""
    def get_full_name(self):
        print(f"Имя: {self.name}\nФамилия: {self.surname}\n")

    def get_total_income(self):
        print(f"Оклад + Премия: {self._income.get('wage') + self._income.get('bonus')} руб")


# Раскомментировать для запуска !
# w = Position("Гвидо", "Ван Россум", "Голландский программист", 3000, 2000)
# w.get_full_name()
# w.get_total_income()


#TODO -------------------------------- Практическое задание 4 -------------------------------------------
# Реализуйте базовый класс Car. У данного класса должны быть следующие атрибуты: speed,
# color, name, is_police (булево). А также методы: go, stop, turn(direction), которые должны
# сообщать, что машина поехала, остановилась, повернула (куда). Опишите несколько
# дочерних классов: TownCar, SportCar, WorkCar, PoliceCar. Добавьте в базовый класс метод
# show_speed, который должен показывать текущую скорость автомобиля. Для классов
# TownCar и WorkCar переопределите метод show_speed. При значении скорости свыше 60
# (TownCar) и 40 (WorkCar) должно выводиться сообщение о превышении скорости.
# Создайте экземпляры классов, передайте значения атрибутов. Выполните доступ к
# атрибутам, выведите результат. Выполните вызов методов и также покажите результат.


class Car:
    """Информация о машине и передвижении"""
    def __init__(self, speed, color, name, is_police):
        self.speed = speed
        self.color = color
        self.name = name
        self.is_police = is_police

    def go(self):
        print(f"Машина {self.name} поехала ")

    def stop(self):
        print(f"Машина {self.name} остановилась")

    def turn(self, derection):
        print(f"Машина {self.name} повернула на: {derection}")

    def show_speed(self):
        print(f"Текущая скорость {self.name}: {self.speed} км/ч")


class TownCar(Car):
    """Городской автомобиль"""
    def __init__(self, speed, color, name, is_police):
        super().__init__(speed, color, name, is_police)

    def show_speed(self):
        if self.speed > 60:
            print('Превышении скорости')
        else:
            print("Нормальная скорость")


class SportCar(Car):
    """Спортивный автомобиль"""
    def __init__(self, speed, color, name, is_police):
        super().__init__(speed, color, name, is_police)


class WorkCar(Car):
    """Рабочий автомобиль"""
    def show_speed(self):
        if self.speed > 40:
            print('Превышении скорости')
        else:
            print("Нормальная скорость")


class PoliceCar(Car):
    """Болицейский автомобиль"""
    def __init__(self, speed, color, name, is_police):
        super().__init__(speed, color, name, is_police)



# Раскомментировать для запуска !
# city = TownCar(60, 'белый', 'Lada', False)
# city.go()
# city.show_speed()



#TODO -------------------------------- Практическое задание 5 -------------------------------------------
# Реализовать класс Stationery (канцелярская принадлежность). Определить в нем атрибут title
# (название) и метод draw (отрисовка). Метод выводит сообщение “Запуск отрисовки.” Создать
# три дочерних класса Pen (ручка), Pencil (карандаш), Handle (маркер). В каждом из классов
# реализовать переопределение метода draw. Для каждого из классов метод должен выводить
# уникальное сообщение. Создать экземпляры классов и проверить, что выведет описанный
# метод для каждого экземпляра.


class Stationery:
    """Название и старт отрисовки"""
    def __init__(self, title):
        self.title = title

    def draw(self):
        print("Запуск отрисовки")


class Pen(Stationery):
    def draw(self):
        print("Запуск отрисовки ручка")


class Pencil(Stationery):
    def draw(self):
        print("Запуск отрисовки карандаш")


class Handle(Stationery):
    def draw(self):
        print("Запуск отрисовки маркер")


p = Pen('Картина')
p.draw()

p1 = Pencil('Картина')
p1.draw()

p2 = Handle('Картина')
p2.draw()










